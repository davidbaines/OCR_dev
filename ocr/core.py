# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['A4_pixel_size', 'text_wrap', 'get_max_line_height', 'get_line_height', 'get_line_width', 'get_A4_image',
           'print_opl', 'create_image', 'get_wrapped_text', 'image_permutations', 'img', 'base_path', 'text_path',
           'out_folder', 'font_path', 'left_margin', 'top_margin', 'right_margin', 'bottom_margin', 'x_right_margin',
           'y_bottom_margin', 'printable_width', 'file_types', 'filenames', 'font_filenames', 'text_files',
           'font_sizes', 'font_files', 'fonts', 'image_infos', 'skip_existing']

# Cell
# Standard library imports
#from importlib import resources
from pathlib import Path
import json
import pprint


# Third party imports
from PIL import Image, ImageDraw, ImageFont
from PIL.ImageFont import FreeTypeFont
from textwrap import wrap


# Read a text file and create a clear image of the text on a page.
# Read a text file and create various distorted, transformed or distressed looking page.
# Read an OCR json file from Google and create a clear image of text on a page.
# Read an OCR json file from Google and write a text file of selected areas.

# Translation from dpi to A4 size
A4_pixel_size = {
    2880: (23811, 33676),
    2400: (19843, 28063),
    1440: (11906, 16838),
    1200: (9921, 14032),
    720:  (5953, 8419),	
    600:  (4960, 7016),
    300:  (2480, 3508),
    150:  (1240, 1754),
    96:   (794, 1123),
    72:   (595, 842)}


# Cell
def text_wrap(text, font, max_width):
        """Wrap lines to specified width.
        This is to enable text of width more than the image width to be display
        nicely.
        @params:
            text: str
                text to wrap
            font: obj
                font of the text
            max_width: int
                width to split the text with
        @return
            lines: list[str]
                list of sub-strings
        """
        lines = []

        # If the text width is smaller than the image width, then no need to split
        # just add it to the line list and return
        if font.getsize(text)[0]  <= max_width:
            lines.append(text)
        else:
            #split the line by spaces to get words
            words = text.split(' ')
            i = 0
            # append every word to a line while its width is shorter than the image width
            while i < len(words):
                line = ''
                while i < len(words) and font.getsize(line + words[i])[0] <= max_width:
                    line = line + words[i]+ " "
                    i += 1
                if not line:
                    line = words[i]
                    i += 1
                lines.append(line)
        return lines

# Cell
def get_max_line_height(lines, font):
    # Calculate the height needed to draw each line of text.
    line_heights = [ get_line_height(line,font) for line in lines]
    # Return the maximum line height.
    return max(line_heights)


def get_line_height(line, font):
    # Return the height of a line of text.
    return font.getmask(line).getbbox()[3]


def get_line_width(line, font):
    # Return the width of a line of text.
    return font.getmask(line).getbbox()[2]


def get_A4_image():
    # Set resolution (dpi)
    resolution = 150

    # Set page size in pixels
    A4 = A4_pixel_size[resolution]

    # Create a page sized image
    A4_image = Image.new(mode='RGB', size=A4, color='white')
    return A4_image

def print_opl(seq):
    for s in seq:
        print(s)


# Cell
def create_image(img, lines, font,H_MARGIN=40,V_MARGIN=40,TEXT_COLOR='black'):

    # Interface to draw on the image
    draw = ImageDraw.Draw(img)

    # Get the line separation required
    line_height = get_max_line_height(lines, font)
    ascent, descent = font.getmetrics()
    y = V_MARGIN + descent

    for line in lines:
        # Draw this line with a left margin
        draw.text((H_MARGIN, y), line, font=font, fill=TEXT_COLOR)

        # Move on to the height at which the next line should be drawn at
        y += line_height

    return img

def get_wrapped_text(text_file,font,printable_width):

    wrapped = []

    with open(text_file, 'r', encoding='utf-8') as infile:
        text = infile.read()
        lines = text.splitlines()
        for line in lines:
            wrapped.extend(text_wrap(line,font,printable_width))

    return wrapped

def image_permutations(text_files,fonts,printable_width):
    # Return a list of tuples containing the info needed to create an image.
    images_info = []

    for text_file in text_files:
            for font in fonts:

                # print(font.size, Path(font.path).stem)
                # Add Font name and size to the output filename
                image_name = text_file.stem + f'_{Path(font.path).stem}_{font.size}'
                images_info.append((text_file, font, printable_width, image_name))

    return images_info


# Cell
# TODO Get Text, Font and size as arguments to the script.
img = get_A4_image()

# Set paths to texts

base_path = Path("D:\Work\Test\Webbs")
text_path = base_path / "texts"
out_folder = base_path / "Input"

# Set path to fonts
font_path = base_path / "fonts"
#font_file = font_path / "GentiumPlus-R.ttf"

left_margin = 40
top_margin = 40
right_margin = 40
bottom_margin = 40

# Get image size in pixels
img_width, img_height = img.size

x_right_margin = img_width - right_margin
y_bottom_margin = img_height - bottom_margin

printable_width = x_right_margin - left_margin

file_types = ['pdf','png']
filenames = ['bkq-bkqNT.txt','bsq-Bassa02.txt','rbt-psa2-3.txt']
font_filenames = ['GentiumPlus-R.ttf','GentiumPlus-I.ttf','arial.ttf','ariali.ttf',]

text_files = [text_path / filename for filename in filenames]

# Set fonts and sizes.
font_sizes = [10,24] #12,16,18,24]
font_files = [font_path / font for font in font_filenames]

fonts = [ImageFont.truetype(str(font_file), font_size) for font_file in font_files for font_size in font_sizes]

#print('These are the text files:')
#print_opl(text_files)
#print('\nThese are the fonts:')
#print_opl(font_filenames)
#print('\nThese are the font sizes:')
#print_opl(font_sizes)
#print()

image_infos = image_permutations(text_files,fonts,printable_width)

#print(f'These are the {len(image_infos)} image files requested:')
#print_opl([image[3] for image in image_infos])
#print_opl(image_infos)

skip_existing = True

for image_info in image_infos:
    img = get_A4_image()
    text_file, font, printable_width, img_name = image_info

    wrapped_text = get_wrapped_text(text_file,font,printable_width)
    text_img = create_image(img,wrapped_text,font)

    for file_type in file_types:
        out_file_name = image_info[3] + '.' + file_type
        out_file = out_folder / out_file_name
        print(f'Processing {out_file.name}. Exists? : {out_file.exists()}')
        if out_file.exists():
            if skip_existing:
                print(f'{str(out_file)} already exists, skipping.')
            else :
                print(f'{str(out_file)} already exists, overwriting.')
                text_img.save(out_file)
        else:
            text_img.save(out_file)


